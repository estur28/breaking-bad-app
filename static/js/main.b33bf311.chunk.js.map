{"version":3,"sources":["features/characters/AboutCharacter.js","images/spinner.svg","components/Spinner.js","features/search/searchSlice.js","features/characters/allCharactersSlice.js","features/characters/AllCharacters.js","components/Title.js","features/search/Search.styled.js","features/search/Search.js","features/episodes/AboutEpisode.js","features/episodes/allEpisodesSlice.js","features/episodes/AllEpisodes.js","components/Navbar.js","features/quotes/AboutQuote.js","features/quotes/allQuotesSlice.js","features/quotes/AllQuotes.js","App.js","app/store.js","index.js"],"names":["AboutCharacter","item","children","className","src","img","alt","name","portrayed","nickname","birthday","status","Spinner","spinner","style","width","margin","display","searchSlice","createSlice","initialState","reducers","setSearchTerm","state","action","payload","clearSearchTerm","actions","selectSearchTerm","search","getAllCharacters","createAsyncThunk","a","fetch","response","json","allCharactersSlice","characters","isLoading","extraReducers","pending","fulfilled","rejected","selectFilteredAllCharacters","allCharacters","selectAllCharacters","searchTerm","filter","character","toLowerCase","includes","AboutAllCharacters","styled","section","AllCharacters","useSelector","dispatch","useDispatch","useEffect","map","char_id","Box","div","BoxHead","h1","BoxText","p","Title","SearchBox","SearchInput","input","ClearButton","button","Search","id","type","placeholder","value","onChange","e","target","length","onClick","AboutEpisode","title","season","episode","air_date","getAllEpisodes","allEpisodesSlice","episodes","hasError","selectFilteredAllEpisodes","allEpisodes","selectAllEpisodes","AboutAllSection","AllEpisodes","episode_id","Nav","ul","StyledLink","Link","LINKS","to","text","Navbar","location","useLocation","pathname","AboutQuote","author","quote","getAllQuotes","allQuotesSlice","quotes","selectFilteredAllQuotes","allQuotes","selectAllQuotes","AllQuotes","quote_id","App","basename","exact","path","component","configureStore","reducer","allCharactersReducer","allEpisodesReducer","allQuotesReducer","searchReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.b33bf311.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './AboutCharacter.scss'\r\n\r\n\r\nconst AboutCharacter = ({ item, children }) => (\r\n        <section className='about'>\r\n           <div className=\"about-inner\">\r\n               <div className=\"about-image\">\r\n                   <img src={item.img} alt='Character' />\r\n               </div>\r\n               <section className='about-info'>\r\n                    <h1>{item.name}</h1>\r\n                    <div>\r\n                        <p>\r\n                            <strong>Actor Name:</strong>\r\n                            {item.portrayed}\r\n                        </p>\r\n\r\n                        <p>\r\n                            <strong>Nickame:</strong>\r\n                            {item.nickname}\r\n                        </p>\r\n\r\n                        <p>\r\n                            <strong>Birthday:</strong>\r\n                            {item.birthday}\r\n                        </p>\r\n\r\n                        <p>\r\n                            <strong>Status:</strong>\r\n                            {item.status}\r\n                        </p>\r\n                    </div>\r\n               </section>\r\n           </div>\r\n           {children}\r\n        </section>\r\n    )\r\n\r\nexport default AboutCharacter\r\n   ","export default __webpack_public_path__ + \"static/media/spinner.85006528.svg\";","import React from 'react'\r\n\r\nimport spinner from \"../images/spinner.svg\"\r\n\r\nconst Spinner = () => (\r\n        <img \r\n            src={spinner}\r\n            style={{ width: '200px', margin: 'auto', display: 'block'}}\r\n            alt='Loading'\r\n            />\r\n    )\r\n\r\nexport default Spinner\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const searchSlice = createSlice({\r\n    name: \"search\",\r\n    initialState: '',\r\n    reducers: {\r\n        setSearchTerm: (state, action) => (state = action.payload),\r\n        clearSearchTerm: (state) => (state = ''),\r\n    },\r\n});\r\n\r\nexport const { setSearchTerm, clearSearchTerm } = searchSlice.actions;\r\n\r\nexport const selectSearchTerm = (state) => state.search;\r\n\r\nexport default searchSlice.reducer;","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { selectSearchTerm } from '../search/searchSlice'\r\n \r\nconst BASE_URL = 'https://www.breakingbadapi.com/api/characters';\r\n\r\n\r\nexport const getAllCharacters = createAsyncThunk(\r\n    'allCharacters/getCharacter',\r\n    async () => {\r\n        const response = await fetch(`${BASE_URL}`);\r\n        const json = await response.json();\r\n    \r\n        return json;\r\n    }\r\n);\r\n\r\nexport const allCharactersSlice = createSlice({\r\n    name: \"allCharacters\",\r\n    initialState: {\r\n        characters: [],\r\n        isLoading: false,\r\n    },\r\n\r\n    reducers: {},\r\n    extraReducers: {\r\n        [getAllCharacters.pending]: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n\r\n        [getAllCharacters.fulfilled]: (state, action) => {\r\n            state.characters = action.payload;\r\n            state.isLoading = false;\r\n        },\r\n\r\n        [getAllCharacters.rejected]: (state) => {\r\n            state.isLoading = false;\r\n        }\r\n    }\r\n});\r\n\r\n// export const allCharactersSlice = createSlice(sliceOptions);\r\n\r\nexport const selectAllCharacters = (state) => state.allCharacters.characters;\r\n\r\nexport const selectFilteredAllCharacters = (state) => {\r\n    const allCharacters = selectAllCharacters(state);\r\n    const searchTerm = selectSearchTerm(state);\r\n\r\n    return allCharacters.filter((character) => character.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n}\r\n\r\nexport default allCharactersSlice.reducer;\r\n\r\n","import React, {useEffect} from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AboutCharacter from './AboutCharacter'\r\nimport Spinner from '../../components/Spinner'\r\n\r\nimport styled from 'styled-components'\r\nimport { selectFilteredAllCharacters } from './allCharactersSlice';\r\nimport { getAllCharacters } from './allCharactersSlice';\r\n\r\nconst AboutAllCharacters = styled.section`\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 1rem;\r\n    margin-bottom: 100px;\r\n    @media (max-width: 1130px) {\r\n        grid-template-columns: repeat(2, 1fr);\r\n    }\r\n\r\n    @media (max-width: 820px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n    }\r\n`\r\n\r\nconst AllCharacters = () => {\r\n    const allCharacters = useSelector(selectFilteredAllCharacters);\r\n    const { isLoading} = useSelector((state) => state.allCharacters);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllCharacters());\r\n    }, [dispatch])\r\n\r\n\r\n    if (isLoading) {\r\n        return <Spinner />;\r\n    }\r\n            \r\n    return (\r\n            <AboutAllCharacters>\r\n            {allCharacters.map((item) => (\r\n                <AboutCharacter \r\n                    key={item.char_id}\r\n                    item={item} />\r\n            ))}\r\n          </AboutAllCharacters>\r\n        )\r\n}\r\nexport default AllCharacters","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Box = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    margin: 0;\r\n`\r\n\r\nconst BoxHead = styled.h1`\r\n    display: block;\r\n    color: #000;\r\n    font-family: 'Ubuntu', sans-serif;\r\n    font-size: 40px;\r\n    font-weight: 800;\r\n    margin: 0;\r\n    @media (max-width: 420px) {\r\n        font-size: 35px;\r\n    }\r\n    @media (max-width: 350px) {\r\n        font-size: 30px;\r\n    }\r\n`\r\n\r\nconst BoxText = styled.p`\r\n    font-size: 20px;\r\n    color: #000;\r\n    font-family: 'Ubuntu', sans-serif;\r\n    text-align: center;\r\n`\r\n\r\nconst Title = () => (\r\n        <Box>\r\n            <BoxHead>BreakingBadApp</BoxHead>\r\n            <BoxText>\r\n                Favorite characters, \r\n                episodes and quotes \r\n                from the show\r\n            </BoxText>\r\n        </Box>\r\n    )\r\n\r\nexport default Title","import styled from 'styled-components'\r\n\r\nexport const SearchBox = styled.section`\r\n    height: 100px;\r\n`\r\n\r\nexport const SearchInput = styled.input`\r\n    display: block;\r\n    padding: 10px;\r\n    font-size: 20px;\r\n    border: 0;\r\n    border-radius: 5px;\r\n    width: 60%;\r\n    margin: auto;\r\n    outline: none;\r\n    position: relative;\r\n`\r\n\r\nexport const ClearButton = styled.button`\r\n    display: inline-block;\r\n    background-color: #fff;\r\n    position: absolute;\r\n    padding: 10px;\r\n    top: 215px;\r\n    right: 21%;\r\n    outline: none;\r\n    border-radius: 5px;\r\n    border: 0;\r\n    @media (max-width: 553px) {\r\n        top: 238px;\r\n    };\r\n    @media (max-width: 420px) {\r\n        top: 232px;\r\n    };\r\n    @media (max-width: 350px) {\r\n        top: 224px;\r\n    };\r\n    @media (max-width: 317px) {\r\n        top: 247px;\r\n    };\r\n`","import React from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    clearSearchTerm,\r\n    selectSearchTerm,\r\n    setSearchTerm,\r\n  } from './searchSlice.js';\r\n\r\nimport {SearchBox, SearchInput, ClearButton } from './Search.styled';\r\n\r\nconst Search = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const searchTerm = useSelector(selectSearchTerm);\r\n\r\n    const onSearchChangeHandler = (e) => {\r\n        dispatch(setSearchTerm(e.target.value));\r\n      };\r\n\r\n    const onSearchTermClearHandler = () => {\r\n        dispatch(clearSearchTerm());\r\n    };\r\n\r\n    return (\r\n        <SearchBox>\r\n            <form>\r\n                <SearchInput \r\n                        id = \"search\"\r\n                        type='text'\r\n                        className=\"form-control\"\r\n                        placeholder=\"Walter White\"\r\n                        value={searchTerm}\r\n                        onChange={onSearchChangeHandler} \r\n                />\r\n                {searchTerm.length > 0 && (\r\n        <ClearButton\r\n          onClick={onSearchTermClearHandler}\r\n          type=\"button\"\r\n          id=\"search-clear-button\">\t\r\n            &#10006;\r\n        </ClearButton>\r\n      )}\r\n            </form>\r\n        </SearchBox>\r\n    )\r\n}\r\nexport default Search\r\n","import React from 'react'\r\n\r\nimport './AboutEpisode.scss'\r\n\r\nconst AboutEpisode = ( { item, children  }) => {\r\n    \r\n    return (\r\n    <section className='about-episode'>\r\n           <div className=\"about-episode__inner\">\r\n                    <h1>{item.title}</h1>\r\n                    <ul>\r\n                        <li>\r\n                            <strong>Season:</strong>\r\n                            {item.season}\r\n                        </li>\r\n\r\n                        <li>\r\n                            <strong>Episode:</strong>\r\n                            {item.episode}\r\n                        </li>\r\n\r\n                        <li>\r\n                            <strong>Air Date:</strong>\r\n                            {item.air_date}\r\n                        </li>\r\n\r\n                        <li>\r\n                            <strong>Characters:</strong>\r\n                            <span>{item.characters}</span>\r\n                        </li>\r\n                    </ul>\r\n               </div>\r\n               { children }\r\n        </section>\r\n    )\r\n    \r\n}\r\n\r\nexport default AboutEpisode\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { selectSearchTerm } from '../search/searchSlice';\r\n\r\n\r\n\r\nconst BASE_URL = 'https://www.breakingbadapi.com/api/episodes';\r\n\r\nexport const getAllEpisodes = createAsyncThunk(\r\n    'allEpisodes/getEpisode',\r\n\r\n\r\n     async () => {\r\n    const response = await fetch(`${BASE_URL}`);\r\n    const json = await response.json();\r\n    return json;\r\n    }\r\n)\r\n\r\n// const loadEpisodesApi = {\r\n//     loadEpisodes\r\n// };\r\n\r\n// export default loadEpisodesApi;\r\n//     loadEpisodesApi.getEpisode\r\n// )\r\n\r\nexport const allEpisodesSlice = createSlice({\r\n    name: \"allEpisodes\",\r\n    initialState: {\r\n        episodes: [],\r\n        isLoading: false,\r\n        hasError: false\r\n    },\r\n\r\n    reducers: {},\r\n    extraReducers: {\r\n        [getAllEpisodes.pending]: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n\r\n        [getAllEpisodes.fulfilled]: (state, action) => {\r\n            state.episodes = action.payload;\r\n            state.isLoading = false;\r\n        },\r\n\r\n        [getAllEpisodes.rejected]: (state) => {\r\n            state.isLoading = false;\r\n        }\r\n    }\r\n});\r\n\r\n// export const allEpisodesSlice = createSlice(sliceOptions);\r\n\r\nexport const selectAllEpisodes = (state) => state.allEpisodes.episodes;\r\n\r\nexport const selectFilteredAllEpisodes = (state) => {\r\n    const allEpisodes = selectAllEpisodes(state);\r\n    const searchTerm = selectSearchTerm(state);\r\n\r\n    return allEpisodes.filter((episode) => episode.title.toLowerCase().includes(searchTerm.toLowerCase()));\r\n}\r\n\r\nexport default allEpisodesSlice.reducer;\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AboutEpisode from \"./AboutEpisode\"\r\nimport Spinner from '../../components/Spinner'\r\n\r\nimport styled from 'styled-components'\r\n\r\nimport {selectFilteredAllEpisodes} from '../../features/episodes/allEpisodesSlice'\r\nimport { getAllEpisodes } from '../../features/episodes/allEpisodesSlice';\r\n\r\n\r\nconst AboutAllSection = styled.section`\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    gap: 1rem;\r\n    @media (max-width: 1050px) {\r\n        grid-template-columns: repeat(3, 1fr);\r\n        }\r\n\r\n    @media (max-width: 840px) {\r\n        grid-template-columns: repeat(2, 1fr);\r\n        }\r\n\r\n    @media (max-width: 560px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`\r\n\r\nconst AllEpisodes = () => {\r\n    // const { state } = useSelector((state) => state.allEpisodes);\r\n    const dispatch = useDispatch();\r\n    const allEpisodes = useSelector(selectFilteredAllEpisodes);\r\n    const { isLoading } = useSelector((state) => state.allEpisodes);\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllEpisodes());\r\n    }, [dispatch]);\r\n\r\n    if (isLoading) {\r\n        return <Spinner />\r\n    }\r\n    return (\r\n    <AboutAllSection>\r\n                {allEpisodes.map((item) => (\r\n                    <AboutEpisode \r\n                        key={item.episode_id}\r\n                        item={item} />\r\n                ))}\r\n    </AboutAllSection>\r\n    ) \r\n}\r\n\r\nexport default AllEpisodes\r\n\r\n\r\n                \r\n","import React from 'react'\r\nimport { useLocation } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Nav = styled.ul`\r\n  display: flex;\r\n  justify-content: center;\r\n  list-style: none;\r\n  margin: 0 0 30px;\r\n  padding: 20px;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n    margin: 0 10px;\r\n    padding: 5px;\r\n    text-decoration: none;\r\n    color: white;\r\n    font-weight: 600;\r\n    font-size: 20px;\r\n    &.active {\r\n        color: #000;\r\n    }\r\n    &:hover {\r\n        text-decoration: underline;\r\n    }\r\n    @media (max-width: 400px) {\r\n        margin: 0;\r\n    }\r\n`\r\n\r\nconst LINKS = [\r\n    {to: '/', text: 'Home'},\r\n    {to: '/episodes', text: 'Episodes'},\r\n    {to: '/quotes', text: 'Quotes'}\r\n];\r\n\r\nconst Navbar = () => {\r\n\r\n    const location = useLocation();\r\n\r\n    return (\r\n        <div>\r\n            <Nav>\r\n            {LINKS.map(item => (<li key={item.to}>\r\n                <StyledLink\r\n               to={item.to}\r\n               className={item.to === location.pathname ? 'active' : ''}>\r\n                   {item.text}\r\n                   </StyledLink>\r\n                   </li>))}\r\n            </Nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\n\r\nimport './AboutQuote.scss'\r\n\r\nconst AboutQuote = ( {item, children } ) => {\r\n    return (\r\n        <section className='about-quote'>\r\n            <div className='about-quote__inner'>\r\n                    <h1>{item.author} </h1>\r\n                    <ul>\r\n                        <li>\r\n                            <strong>Quote:</strong>\r\n                            {item.quote}\r\n                        </li>\r\n\r\n                    </ul>\r\n                </div>\r\n                { children }\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AboutQuote\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { selectSearchTerm } from '../search/searchSlice';\r\n\r\nconst BASE_URL = 'https://www.breakingbadapi.com/api/quotes';\r\nexport const getAllQuotes = createAsyncThunk(\r\n    'allQuotes/getQuote',\r\n     async () => {\r\n    const response = await fetch(`${BASE_URL}`);\r\n    const json = await response.json();\r\n    return json;\r\n}\r\n\r\n// const loadQuotesApi = {\r\n//     loadQuotes\r\n// };\r\n\r\n// export default loadQuotesApi;\r\n//     loadQuotesApi.getQuote\r\n)\r\n\r\nexport const allQuotesSlice = createSlice({\r\n    name: \"allQuotes\",\r\n    initialState: {\r\n        quotes: [],\r\n        isLoading: false,\r\n    },\r\n\r\n    reducers: {},\r\n    extraReducers: {\r\n        [getAllQuotes.pending]: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n\r\n        [getAllQuotes.fulfilled]: (state, action) => {\r\n            state.quotes = action.payload;\r\n            state.isLoading = false;\r\n        },\r\n\r\n        [getAllQuotes.rejected]: (state) => {\r\n            state.isLoading = false;\r\n        }\r\n    }\r\n});\r\n\r\n// export const allQuotesSlice = createSlice(sliceOptions);\r\n\r\nexport const selectAllQuotes = (state) => state.allQuotes.quotes;\r\n\r\nexport const selectFilteredAllQuotes = (state) => {\r\n    const allQuotes = selectAllQuotes(state);\r\n    const searchTerm = selectSearchTerm(state);\r\n\r\n    return allQuotes.filter((quote) => quote.author.toLowerCase().includes(searchTerm.toLowerCase()));\r\n}\r\n\r\nexport default allQuotesSlice.reducer;\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AboutQuote from './AboutQuote'\r\nimport Spinner from '../../components/Spinner'\r\nimport styled from 'styled-components'\r\nimport { selectFilteredAllQuotes } from '../../features/quotes/allQuotesSlice';\r\nimport { getAllQuotes } from '../../features/quotes/allQuotesSlice';\r\n\r\nconst AboutAllSection = styled.section`\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    gap: 1rem;\r\n    @media (max-width: 800px) {\r\n        grid-template-columns: repeat(2, 1fr);\r\n        }\r\n\r\n    @media (max-width: 500px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`\r\n\r\nconst AllQuotes = () => {\r\n    const allQuotes = useSelector(selectFilteredAllQuotes);\r\n    const { isLoading } = useSelector((state) => state.allQuotes);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllQuotes());\r\n    }, [dispatch])\r\n\r\n    if (isLoading) {\r\n        return <Spinner />;\r\n    }\r\n    \r\n    return (\r\n        <AboutAllSection>\r\n            {allQuotes.map((item) => (\r\n                <AboutQuote \r\n                    key={item.quote_id}\r\n                    item={item} />\r\n            ))}\r\n        </AboutAllSection>\r\n    )\r\n}\r\n\r\nexport default AllQuotes\r\n","import React from 'react';\nimport AllCharacters from './features/characters/AllCharacters'\nimport Title from './components/Title'\nimport Search from './features/search/Search'\nimport AllEpisodes from './features/episodes/AllEpisodes';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport AllQuotes from './features/quotes/AllQuotes';\nimport './App.scss';\n\n\nexport default function App() {\n  return (\n    <>\n    <BrowserRouter basename=\"/breaking-bad-app\">\n    <Switch>\n      <div className='container'>\n        <Navbar/>\n          <Title />\n          <Search />\n            <Route exact path=\"/\" component={AllCharacters}></Route>\n            <Route exact path=\"/episodes\" component={AllEpisodes}></Route>\n            <Route exact path=\"/quotes\" component={AllQuotes}></Route>\n      </div>\n    </Switch>\n    </BrowserRouter>\n    </>\n  )\n}\n\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport allCharactersReducer from '../features/characters/allCharactersSlice';\r\nimport allEpisodesReducer from '../features/episodes/allEpisodesSlice';\r\nimport searchReducer from '../features/search/searchSlice';\r\nimport allQuotesReducer from '../features/quotes/allQuotesSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        allCharacters: allCharactersReducer,\r\n        allEpisodes: allEpisodesReducer,\r\n        allQuotes: allQuotesReducer,\r\n        search: searchReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n    <HashRouter>\n    <App />\n    </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}